apply plugin: 'com.android.application'
def config = rootProject.ext //
def librarys = rootProject.ext.dependencies //
android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        jumboMode = true
    }

//    aaptOptions {
//        cruncherEnabled = false
//        useNewCruncher = false
//    }

//    packagingOptions {
//        exclude 'META-INF/rxjava.properties'
//    }
    packagingOptions {
        pickFirst 'lib/armeabi-v7a/libRSSupport.so'
        pickFirst 'lib/armeabi-v7a/librsjni_androidx.so'
        pickFirst 'lib/armeabi-v7a/librsjni.so'
        pickFirst 'lib/arm64-v8a/librsjni.so'
        pickFirst 'lib/arm64-v8a/libRSSupport.so'
        pickFirst 'lib/arm64-v8a/librsjni_androidx.so'
        pickFirst 'lib/x86_64/libRSSupport.so'
        pickFirst 'lib/x86_64/librsjni_androidx.so'
        pickFirst 'lib/x86_64/librsjni.so'
        pickFirst 'lib/x86/librsjni_androidx.so'
        pickFirst 'lib/x86/libRSSupport.so'
        pickFirst 'lib/x86/librsjni.so'
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
//    ndkVersion "major.minor.build" // e.g.,  ndkVersion '21.3.6528147'
    ndkVersion "22.0.7026061" // e.g.,  ndkVersion '21.3.6528147'
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion
    defaultConfig {
        applicationId "com.fosung.lighthouse"
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.appversionCode
        versionName config.appversionName
        multiDexEnabled true
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true
        //javaCompileOptions
//        javaCompileOptions {
//            annotationProcessorOptions {
//                includeCompileClasspath = true
//            }
//        }
        // Cmake
        externalNativeBuild {
            cmake {
                version "3.18.1"
                // 指定一些编译选项
                cppFlags "-std=c++11 -frtti -fexceptions"
                // 也可以使用下面这种语法向变量传递参数：
                // arguments "-D变量名=参数".
                arguments "-DANDROID_ARM_NEON=TRUE",
                        // 使用下面这种语法向变量传递多个参数（参数之间使用空格隔开）：
                        // arguments "-D变量名=参数1 参数2"
                        "-DANDROID_CPP_FEATURES=rtti exceptions"
                // 指定ABI
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }

        ndk {
            abiFilters /*'armeabi', */ 'armeabi-v7a'/*, 'arm64-v8a'*/
//            abiFilters 'armeabi-v7a'
        }

//        sourceSets.main {
//            jni.srcDirs = []
//            //LOCAL_LDFLAGS += -fuse-ld=bfd
//            //jni.srcDirs 'src/main/jni'
//            jniLibs.srcDir './../../otherjar'
////            jniLibs.srcDir(['libs', './../../otherjar'])
////            jniLibs.srcDir(['libs'])
////            jniLibs.srcDirs = ['src/main/jni', './../../otherjar']
//        }
//        sourceSets {
//            main {
//                jniLibs.srcDirs = ['libs']
//            }
//        }
    }
    // CMakeLists.txt
    externalNativeBuild {
        cmake {
//            path "CMakeLists.txt"  //
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    flavorDimensions "keep"
    productFlavors {
        bxn_nation {
            dimension "keep"
            applicationId "com.fosung.lighthouse1"
            manifestPlaceholders = [
//                    JSHARE_PKGNAME: "com.fosung.lighthouse1",
//                    JPUSH_PKGNAME : "com.fosung.lighthouse1",
//                    JPUSH_APPKEY  : "b5333edf8469ecdec1d3ad73", //JPush 上注册的包名对应的 Appkey.
//                    JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
//                    TENCENT_APPID : "1106011004",
                    MTA_APPKEY : "注册应用的appkey",
                    MTA_CHANNEL: "渠道名称",
                    app_name   : "山东统计",
                    app_icon   : "@drawable/icon"
            ]
        }
        bxnt_nation {
            dimension "keep"
            applicationId "com.fosung.lighthouse.test"
            manifestPlaceholders = [
                    JSHARE_PKGNAME: "com.fosung.lighthouse.test",
                    JPUSH_PKGNAME : "com.fosung.lighthouse.test",
                    JPUSH_APPKEY  : "b5333edf8469ecdec9d3ad73", //JPush 上注册的包名对应的 Appkey.
                    JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
                    TENCENT_APPID : "1106011004",
                    MTA_APPKEY    : "注册应用的appkey",
                    MTA_CHANNEL   : "渠道名称",
                    app_name      : "山东统计-测试",
                    app_icon      : "@drawable/icon"
            ]
        }
        bxny_nation {
            dimension "keep"
            applicationId "com.fosung.lighthouse.test2"
            manifestPlaceholders = [
                    JSHARE_PKGNAME: "com.fosung.lighthouse.test2",
                    JPUSH_PKGNAME : "com.fosung.lighthouse.test2",
                    JPUSH_APPKEY  : "b5333edf8469ecdec9d3ad73", //JPush 上注册的包名对应的 Appkey.
                    JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
                    TENCENT_APPID : "1106011004",
                    MTA_APPKEY    : "注册应用的appkey",
                    MTA_CHANNEL   : "渠道名称",
                    app_name      : "山东统计-预生产",
                    app_icon      : "@drawable/icon"
            ]
        }
    }
    applicationVariants.all { variant ->
//        variant.outputs.all {
//////            outputFileName = "boxlauncher_${defaultConfig.versionName}_${variant.flavorName}.apk"
//            outputFileName = "demo1-${variant.flavorName}-V${variant.versionName}.apk"
//        }
//        def outputApkName = "geek_${variant.flavorName}_V${variant.versionName}.apk"
        def outputApkName = "yewulibs-demo1-app-${variant.flavorName}-release.apk"
        variant.outputs.all {
            outputFileName = outputApkName
        }
//        /**
//         * task type, you want to bak
//         */
//        def bakPath = file("${buildDir}/bakApk/")
//        def taskName = variant.name
//        tasks.all {
//            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
//
//                it.doLast {
//                    copy {
//                        def bakFilePrefix = "${project.name}-${variant.baseName}"
//                        def destPath = "${bakPath}/${project.name}-${date}/${variant.flavorName}"
//
//                        from variant.outputs.first().outputFile
//                        into destPath
//                        rename { String fileName ->
//                            fileName.replace(outputApkName, "${bakFilePrefix}.apk")
//                        }
//
//                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
//                        into destPath
//                        rename { String fileName ->
//                            fileName.replace("mapping.txt", "${bakFilePrefix}-mapping.txt")
//                        }
//
//                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
//                        into destPath
//                        rename { String fileName ->
//                            fileName.replace("R.txt", "${bakFilePrefix}-R.txt")
//                        }
//                    }
//                }
//            }
//        }
    }
    signingConfigs {
        release {
            storeFile file('./firebox_keystore.jks')
            keyAlias 'haier'
            keyPassword 'android'
            storePassword 'android'
        }
        debug {
            storeFile file('./firebox_keystore.jks')
            keyAlias 'haier'
            keyPassword 'android'
            storePassword 'android'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
//            zipAlignEnabled false
//            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
//            zipAlignEnabled false
//            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
//    dataBinding {
//        enabled = true
//    }
//    viewBinding.enabled = true
    buildFeatures {
        dataBinding = true
        // for view binding :
        // viewBinding = true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // TODO common库
    implementation project(':commonlibs:acommon:baselibrary')
    implementation 'com.github.GeekCodesTeam:geeklibs:1.2.8'
    implementation project(':zfsjx-yitihuazhihuipingtai:yewulibs1-appcomm')
    // TODO 业务
    implementation project(':zfsjx-yitihuazhihuipingtai:yewulibs1-appindex')
    implementation project(':zfsjx-yitihuazhihuipingtai:yewulibs1-appsplash')
    implementation project(':zfsjx-yitihuazhihuipingtai:yewulibs1-applogin')
    // TODO 接口

}

//apply from: '../../mobsdk.gradle'
// walle
apply from: './multiple-channel.gradle'
// tinker
//apply from: './tinker-support.gradle'
// TODO mob
apply from: './../MobSDK.gradle'